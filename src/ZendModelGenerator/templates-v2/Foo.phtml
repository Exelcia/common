<?php
require_once 'FooFunctions.php';

echo "<?php\n";
?>

namespace <?= $this->_namespace ?>\Model;

use <?= $this->_namespace ?>\Model\Entity;
use Zend\InputFilter\InputFilter;
use Zend\InputFilter\Factory as InputFactory;
use Zend\InputFilter\InputFilterAwareInterface;
use Zend\InputFilter\InputFilterInterface;


class <?= $this->_className ?> extends Entity implements InputFilterAwareInterface
{
protected $inputFilter;
<?php foreach ($this->_columns as $column): ?>
    /**
    <?php if (!empty($column['comment'])) : ?>
        * <?= $column['comment'] . "\n" ?>
    <?php endif; ?>
    * Database var type <?= $column['type'] . "\n" ?>
    *
    * @var <?= $column['phptype'] . "\n" ?>
    */
    protected $_<?= $column['capital'] ?>;

<?php endforeach; ?>


<?php foreach ($this->getForeignKeysInfo() as $key): ?>
    /**
    * Parent relation <?= $key['key_name'] . "\n" ?>
    *
    * @var <?= $this->_namespace ?>\Model\<?= $this->_getClassName($key['foreign_tbl_name']) . "\n" ?>
    */
    protected $_<?= $this->_getRelationName($key, 'parent') ?>;

<?php endforeach; ?>

<?php foreach ($this->getDependentTables() as $key): ?>
    /**
    * Dependent relation <?= $key['key_name'] . "\n" ?>
    * Type: <?= ($key['type'] == 'one') ? 'One-to-One' : 'One-to-Many' ?> relationship
    *
    * @var <?= $this->_namespace ?>\Model\<?= $this->_getClassName($key['foreign_tbl_name']) . "\n" ?>
    */
    protected $_<?= $this->_getRelationName($key, 'dependent') ?>;

<?php endforeach; ?>
/**
* Sets up column and relationship lists
*/
public function __construct()
{
$this->setColumnsList(array(
<?php foreach ($this->_columns as $column): ?>
    '<?= $column['field'] ?>'=>'<?= $column['capital'] ?>',
<?php endforeach; ?>
));

$this->setParentList(array(
<?php foreach ($this->getForeignKeysInfo() as $key): ?>
    '<?= $this->_getCapital($key['key_name']) ?>'=> array(
    'property' => '<?= $this->_getRelationName($key, 'parent') ?>',
    'table_name' => '<?= $this->_getClassName($key['foreign_tbl_name']) ?>',
    ),
<?php endforeach; ?>
));

$this->setDependentList(array(
<?php foreach ($this->getDependentTables() as $key): ?>
    '<?= $this->_getCapital($key['key_name']) ?>' => array(
    'property' => '<?= $this->_getRelationName($key, 'dependent') ?>',
    'table_name' => '<?= $this->_getClassName($key['foreign_tbl_name']) ?>',
    ),
<?php endforeach; ?>
));
}

public function setInputFilter(InputFilterInterface $inputFilter)
{
throw new \Exception("Not used");
}

<?php foreach ($this->_columns as $column): ?>

    /**
    * Sets column <?= $column['field'] ?><?php if (strpos($column['type'], 'datetime') !== false): ?>. Stored in ISO 8601 format.<?php
    endif;
    echo "\n";
    ?>
    *
    <?php if (strpos($column['type'], 'datetime') !== false): ?>
        * @param string|Datetime $date
    <?php else: ?>
        * @param <?= $column['phptype'] ?> $data
    <?php endif; ?>
    * @return <?= $this->_namespace ?>\Model\<?= $this->_className . "\n" ?>
    */
    public function set<?= $column['capital'] ?>($data)
    {
    <?php if (strpos($column['type'], 'datetime') !== false): ?>
        if (! empty($data)) {
        if (! $data instanceof \DateTime) {
        $data = new \DateTime($data);
        }

        $data = $data->format (<?php echo $this->getDateTimeFormat() ?>);
        }

    <?php endif; ?>
    $this->_<?= $column['capital'] ?> = $data;
    return $this;
    }

    /**
    * Gets column <?= $column['field'] . "\n" ?>
    *
    <?php if (strpos($column['type'], 'datetime') !== false): ?>
        * @param boolean $returnDateTime
        * @return \DateTime|null|string DateTime representation of this datetime if enabled, or ISO 8601 string if not
    <?php else: ?>
        * @return <?= $column['phptype'] . "\n" ?>
    <?php endif; ?>
    */
    public function get<?= $column['capital'] ?>(<?php if (strpos($column['type'], 'datetime') !== false): ?>$returnDateTime = false<?php endif; ?>)
    {
    <?php if (strpos($column['type'], 'datetime') !== false): ?>
        if ($returnDateTime) {
        if ($this->_<?= $column['capital'] ?> === null) {
        return null;
        }
        return new \DateTime($this->_<?= $column['capital'] ?>, <?php echo $this->getDateTimeFormat() ?>);
        }

        return $this->_<?= $column['capital'] ?>;
    <?php elseif ($column['phptype'] == 'boolean'): ?>
        return $this->_<?= $column['capital'] ?> ? true : false;
    <?php else: ?>
        return $this->_<?= $column['capital'] ?>;
    <?php endif; ?>
    }
<?php endforeach; ?>


<?php foreach ($this->getForeignKeysInfo() as $key): ?>

    /**
    * Sets parent relation <?= $this->_getClassName($key['column_name']) . "\n" ?>
    *
    * @param <?= $this->_namespace ?>\Model\<?= $this->_getClassName($key['foreign_tbl_name']) ?> $data
    * @return <?= $this->_namespace ?>\Model\<?= $this->_className . "\n" ?>
    */
    public function set<?= $this->_getRelationName($key, 'parent') ?>(\<?= $this->_namespace ?>\Model\<?= $this->_getClassName($key['foreign_tbl_name']) ?> $data)
    {
    $this->_<?= $this->_getRelationName($key, 'parent') ?> = $data;

    $primary_key = $data->getPrimaryKey();
    <?php if (is_array($key['foreign_tbl_column_name']) && is_array($key['column_name'])) : ?>
        <?php
        while ($column = next($key['foreign_tbl_column_name'])) :
            $foreign_column = next($key['column_name']);
            ?>
            $this->set<?= $this->_getCapital($column) ?>($primary_key['<?php echo $foreign_column ?>']);
            <?php
        endwhile;
    else :
        ?>
        if (is_array($primary_key)) {
        $primary_key = $primary_key['<?= $key['foreign_tbl_column_name'] ?>'];
        }

        $this->set<?= $this->_getCapital($key['column_name']) ?>($primary_key);
    <?php endif; ?>

    return $this;
    }

    /**
    * Gets parent <?= $this->_getClassName($key['column_name']) . "\n" ?>
    *
    * @param boolean $load Load the object if it is not already
    * @return <?= $this->_namespace ?>\Model\<?= $this->_getClassName($key['foreign_tbl_name']) . "\n" ?>
    */
    public function get<?= $this->_getRelationName($key, 'parent') ?>($load = true)
    {
    if ($this->_<?= $this->_getRelationName($key, 'parent') ?> === null && $load) {
    $this->getMapper()->loadRelated('<?= $this->_getCapital($key['key_name']) ?>', $this);
    }

    return $this->_<?= $this->_getRelationName($key, 'parent') ?>;
    }
<?php endforeach; ?>
<?php foreach ($this->getDependentTables() as $key): ?>

    <?php if ($key['type'] == 'one') : ?>
        /**
        * Sets dependent relation <?= $key['key_name'] . "\n" ?>
        *
        * @param <?= $this->_namespace ?>\Model\<?= $this->_getClassName($key['foreign_tbl_name']) ?> $data
        * @return <?= $this->_namespace ?>\Model\<?= $this->_className . "\n" ?>
        */
        public function set<?= $this->_getRelationName($key, 'dependent') ?>(\<?= $this->_namespace ?>\Model\<?= $this->_getClassName($key['foreign_tbl_name']) ?> $data)
        {
        $this->_<?= $this->_getRelationName($key, 'dependent') ?> = $data;
        return $this;
        }

        /**
        * Gets dependent <?= $key['key_name'] . "\n" ?>
        *
        * @param boolean $load Load the object if it is not already
        * @return <?= $this->_namespace ?>\Model\<?= $this->_getClassName($key['foreign_tbl_name']) . "\n" ?>
        */
        public function get<?= $this->_getRelationName($key, 'dependent') ?>($load = true)
        {
        if ($this->_<?= $this->_getRelationName($key, 'dependent') ?> === null && $load) {
        $this->getMapper()->loadRelated('<?= $this->_getCapital($key['key_name']) ?>', $this);
        }

        return $this->_<?= $this->_getRelationName($key, 'dependent') ?>;
        }
    <?php else: ?>
        /**
        * Sets dependent relations <?= $key['key_name'] . "\n" ?>
        *
        * @param array $data An array of <?= $this->_namespace ?>\Model\<?= $this->_getClassName($key['foreign_tbl_name']) . "\n" ?>
        * @return <?= $this->_namespace ?>\Model\<?= $this->_className . "\n" ?>
        */
        public function set<?= $this->_getRelationName($key, 'dependent') ?>(array $data)
        {
        $this->_<?= $this->_getRelationName($key, 'dependent') ?> = array();

        foreach ($data as $object) {
        $this->add<?= $this->_getRelationName($key, 'dependent') ?>($object);
        }

        return $this;
        }

        /**
        * Sets dependent relations <?= $key['key_name'] . "\n" ?>
        *
        * @param <?= $this->_namespace ?>\Model\<?= $this->_getClassName($key['foreign_tbl_name']) ?> $data
        * @return <?= $this->_namespace ?>\Model\<?= $this->_className . "\n" ?>
        */
        public function add<?= $this->_getRelationName($key, 'dependent') ?>(\<?= $this->_namespace ?>\Model\<?= $this->_getClassName($key['foreign_tbl_name']) ?> $data)
        {
        $this->_<?= $this->_getRelationName($key, 'dependent') ?>[] = $data;
        return $this;
        }

        /**
        * Gets dependent <?= $key['key_name'] . "\n" ?>
        *
        * @param boolean $load Load the object if it is not already
        * @return array The array of <?= $this->_namespace ?>\Model\<?= $this->_getClassName($key['foreign_tbl_name']) . "\n" ?>
        */
        /*
        public function get<?= $this->_getRelationName($key, 'dependent') ?>($load = true)
        {
        if ($this->_<?= $this->_getRelationName($key, 'dependent') ?> === null && $load) {
        $this->getMapper()->loadRelated('<?= $this->_getCapital($key['key_name']) ?>', $this);
        }

        return $this->_<?= $this->_getRelationName($key, 'dependent') ?>;
        }
        */
    <?php endif; ?>
<?php endforeach; ?>

/**
* Array of options/values to be set for this model. Options without a
* matching method are ignored.
*
* @param array $options
*
*/

public function exchangeArray(array $data)
{
<?php foreach ($this->_columns as $column): ?>
    $this->_<?= $column['capital'] ?>     = (isset($data['<?= $column['field'] ?>'])) ? $data['<?= $column['field'] ?>'] : null;
<?php endforeach; ?>

}

/**
* Get input filter
*
* @return InputFilter
*/
public function getInputFilter()
{
if (!$this->inputFilter) {
$inputFilter = new InputFilter();

$factory = new InputFactory();

<?php
foreach ($this->_columns as $column) {
    $fieldName = $column['field'];
    if ($fieldName == $this->_primaryKey) {
        inputFilterPrimaryKey($this->_columns, $fieldName);
    } else {
//TODO: timestamp is shown as phptype string. probably a new filter should be created
        switch ($column['phptype']) {
            case 'string':
                inputFilterString($this->_columns, $fieldName, $this->_charset);
                break;
            case 'int':
                inputFilterInt($this->_columns, $fieldName);
                break;
            case 'boolean':
                inputFilterBoolean($this->_columns, $fieldName);
                break;
            default:
        }
    }
}
?>

$this->inputFilter = $inputFilter;
}

return $this->inputFilter;
}

}


<?php

namespace {{namespace}}\Entity;

use {{namespace}}\Entity;
use Zend\InputFilter\InputFilter;
use Zend\InputFilter\Factory as InputFactory;
use Zend\InputFilter\InputFilterAwareInterface;
use Zend\InputFilter\InputFilterInterface;


class {{className}} extends Entity 
{
{% for column in columns %}
    /**
    {% if column['comment'] is defined %}
    * {{ column['comment']  }}
    {% endif %}
    * Database var type {{column['type']}}
    *
    * @var {{column['phptype']}}
    */
    protected ${{column['capital']}};

{% endfor %}


{% for  key in  foreignKeysInfo %}
    /**
    * Parent relation {{key['key_name']  }}
    *
    * @var \{{namespace}}\{{getClassName[key['key_name']]['foreign_tbl_name']}}
    */
    protected ${{getRelationNameParent[key['key_name']] }};
{% endfor %}

{% for key in  dependentTables %}
    /**
    * Dependent relation {{key['key_name']  }}
    * Type: {%if key['type'] == 'one'%} 'One-to-One' {% else %} 'One-to-Many' {% endif %} relationship
    *
    * @var {{namespace}}\{{getClassName[key['key_name']]['foreign_tbl_name']}}
    */
    protected ${{getRelationNameDependent[key['key_name']] }};

{% endfor %}
{#
    /**
    * Sets up column and relationship lists
    */
    public function __construct()
    {
    
        $this->setColumnsList(array(
        {% for column in columns %}
        '{{column['field']}}'=>'{{column['capital']}}',
        {% endfor %}
            ));

            $this->setParentList(array(
            {% for  key in  foreignKeysInfo %}
                '{{getCapital[key['key_name']] }}'=> array(
                'property'      => '{{getRelationNameParent[key['key_name']]}}',
                'table_name'    => '{{getClassName[key['key_name']]}}',
                ),
            {% endfor %}
        ));

        $this->setDependentList(array(
        {% for key in  dependentTables %}
            '{{getCapital[key['key_name']] }}' => array(
            'property'      => '{{getRelationNameDependent[key['key_name']]}}',
            'table_name'    => '{{getClassName[key['key_name']]}}',
            ),
        {% endfor %}
        ));
    }
#}
          

{% for column in columns %}
{#
    /**
    * Sets column {{column['field'] }}{% if 'datetime' in column['type'] %}. Stored in ISO 8601 format.{%endif%}
    *
    {% if 'datetime' in column['type'] %}
    * @param string|Datetime $date
    {% else %}
    * @param {{column['phptype'] }} $data
    {% endif %}
    * @return {{namespace}}\{{className}}
    */
    public function set{{column['capital']}}($data)
    {
        {% if 'datetime' in column['type'] %}
        if (! empty($data)) {
            if (! $data instanceof \DateTime) {
                $data = new \DateTime($data);
            }
            $data = $data->format (<?php echo $this->getDateTimeFormat() }});
        }
        {% endif %}
        $this->{{column['capital'] }} = $data;
        return $this;
    }

    /**
    * Gets column {{column['field']  }}
    *
    {% if 'datetime' in column['type'] %}
    * @param boolean $returnDateTime
    * @return \DateTime|null|string DateTime representation of this datetime if enabled, or ISO 8601 string if not
    {% else %}
    * @return {{column['phptype']  }}
    {% endif %}
    */
    public function get{{column['capital'] }}({% if 'datetime' in column['type'] %}$returnDateTime = false{%endif%})
    {
        {% if 'datetime' in column['type'] %}
        if ($returnDateTime) {
            if ($this->{{column['capital'] }} === null) {
                return null;
            }
            return new \DateTime($this->{{column['capital'] }}, <?php echo this->getDateTimeFormat() }});
        }
        return $this->{{column['capital'] }};
    {% elseif (column['phptype'] == 'boolean') %}
        return $this->{{column['capital'] }} ? true : false;
    {% else %}
        return $this->{{column['capital'] }};
    {% endif %}
    }
    #}
{% endfor %}


{% for  key in  foreignKeysInfo %}
   {#
    /**
    * Sets parent relation {{getClassName[key['key_name']]['column_name']}}
    *
    * @param \{{namespace}}\{{getClassName[key['key_name']]['foreign_tbl_name']}} $data
    * @return \{{namespace}}\{{className}}
    */
    public function set{{getRelationNameParent[key['key_name']] }}(\{{namespace}}\{{getClassName[key['key_name']]['foreign_tbl_name']}} $data)
    {
        $this->{{getRelationNameParent[key['key_name']] }} = $data;

        $primary_key = $data->getPrimaryKey();
        {% if key['foreign_tbl_column_name'] is iterable and key['column_name'] is iterable  %}
            {% for column in key['foreign_tbl_column_name']%}
        //$foreign_column = next(key['column_name']);
        
        
            {% endfor %}
        {%else%}
        if (is_array($primary_key)) {
        $primary_key = $primary_key['{{key['foreign_tbl_column_name'] }}'];
        }

        $this->set{{getCapital[key['key_name']] }}($primary_key);
        {% endif %}

        return $this;
    }

    /**
    * Gets parent {{this->getClassName(key['column_name'])  }}
    *
    * @param boolean $load Load the object if it is not already
    * @return {{namespace}}\{{this->getClassName(key['foreign_tbl_name'])  }}
    */
    public function get{{getRelationNameParent[key['key_name']] }}($load = true)
    {
    if ($this->{{getRelationNameParent[key['key_name']] }} === null && $load) {
    $this->getMapper()->loadRelated('{{this->getCapital(key['key_name']) }}', $this);
    }

    return $this->{{getRelationNameParent[key['key_name']] }};
    }
    {% endfor %}

        {% for key in  dependentTables %}

        {% if (key['type'] == 'one') : }}
        /**
        * Sets dependent relation {{key['key_name']  }}
        *
        * @param {{namespace}}\{{getClassName[key['key_name']]['foreign_tbl_name']}} $data
        * @return {{namespace}}\{{className}}
        */
        public function set{{this->getRelationName(key, 'dependent') }}(\{{namespace}}\{{getClassName[key['key_name']]['foreign_tbl_name']}} $data)
        {
        $this->{{this->getRelationName(key, 'dependent') }} = $data;
        return $this;
        }

        /**
        * Gets dependent {{key['key_name']  }}
        *
        * @param boolean $load Load the object if it is not already
        * @return {{namespace}}\{{this->getClassName(key['foreign_tbl_name'])  }}
        */
        public function get{{this->getRelationName(key, 'dependent') }}()
        {
        return $this->{{this->getRelationName(key, 'dependent') }};
        }
        {% else: }}
        /**
        * Sets dependent relations {{key['key_name']  }}
        *
        * @param array $data An array of {{namespace}}\{{this->getClassName(key['foreign_tbl_name'])  }}
        * @return {{namespace}}\{{className}}
        */
        public function set{{this->getRelationName(key, 'dependent') }}(array $data)
        {
        $this->{{this->getRelationName(key, 'dependent') }} = array();

        foreach ($data as $object) {
        $this->add{{this->getRelationName(key, 'dependent') }}($object);
        }

        return $this;
        }

        /**
        * Sets dependent relations {{key['key_name']  }}
        *
        * @param {{namespace}}\{{getClassName[key['key_name']]['foreign_tbl_name']}} $data
        * @return {{namespace}}\{{className}}
        */
        public function add{{this->getRelationName(key, 'dependent') }}(\{{namespace}}\{{getClassName[key['key_name']]['foreign_tbl_name']}} $data)
        {
        $this->{{this->getRelationName(key, 'dependent') }}[] = $data;
        return $this;
        }

        /**
        * Gets dependent {{key['key_name']  }}
        *
        * @return array The array of {{namespace}}\{{this->getClassName(key['foreign_tbl_name'])  }}
        */

        public function get{{this->getRelationName(key, 'dependent') }}()
        {
        return $this->{{this->getRelationName(key, 'dependent') }};
        }

        {% endif%}
        #}
{% endfor %}

    /**
    * Array of options/values to be set for this model. Options without a
    * matching method are ignored.
    *
    * @param array $data
    *
    */
    public function exchangeArray(array $data)
    {
    {% for column in columns %}
        $this->{{column['capital']}}     = (isset($data['{{column['field'] }}'])) ? $data['{{column['field'] }}'] : null;
    {% endfor %}
    }

    /**
    * Returns an array, keys are the field names.
    *
    * @param \{{namespace}}\{{className}} $model
    * @return array
    */
    public function toArray()
    {
        $result = array(
        {% for column in columns %}
            '{{column['field'] }}' => $this->get{{column['capital'] }}(),
        {% endfor %}
        );
        return $result;
    }

}

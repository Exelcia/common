<?php
echo "<?php\n";
?>

namespace <?= $this->_namespace ?>;

/**
* Application Model DbTables
*
* @package <?= $this->_namespace ?>
* @author <?= $this->_author . "\n" ?>
* @copyright <?= $this->_copyright . "\n" ?>
* @license <?= $this->_license . "\n" ?>
*/
use Zend\Db\TableGateway\AbstractTableGateway,
Zend\Db\TableGateway\Feature,
Pimple,
Zend\Db\Adapter\Adapter;

abstract class Manager extends AbstractTableGateway
{
/**
* @var $entity - Entity
*
*/
protected $entity;

/**
* @var $container - Pimple service container
*
*/
protected $container;

public function __construct(Adapter $adapter,Entity $entity)
{
$this->adapter = $adapter;
$this->entity = $entity;
$this->featureSet = new Feature\FeatureSet();
$this->featureSet->addFeature(new Feature\GlobalAdapterFeature());
$this->initialize();
}

public function all(){
return $this->select();
}

/**
* Inject container
* @param Pimple $c
* @return self
*/
public function setContainer(Pimple $c)
{
$this->container = $c;
return $this;
}

/**
* Retrive container
* @return Pimple
*/
public function getContainer()
{
return $this->container;
}

/**
* Returns the primary key column name(s)
*
* @return string|array
*/
public function getPrimaryKeyName()
{
return $this->_id;
}

/**
* Returns the table name
*
* @return string
*/
public function getTableName()
{
return $this->_name;
}

/**
* Saves current row, and optionally dependent rows
*
* @param \<?= $this->_namespace ?>\<?= $this->_className ?> $model
* @param boolean $ignoreEmptyValues Should empty values saved
* @param boolean $recursive Should the object graph be walked for all related elements
* @param boolean $useTransaction Flag to indicate if save should be done inside a database transaction
* @return int Id model
*/
public function save(Entity $entity)
{
$data = $entity->toArray();
$returnId = false;
$id = (int)$data[$this->_id];
if ($id == 0) {
$this->insert($data);
$returnId = $this->getLastInsertValue();
} else {
if ($this->find($id)) {
$returnId = $id;
$this->update($data, array($this->_id => $id));
} else {
throw new \Exception('Form id does not exit');
}
}
return $returnId;
}

/**
* Deletes the current model
*
* @param Entity $entity
* @param boolean $useTransaction Flag to indicate if delete should be done inside a database transaction
* @return int
*/
public abstract function deleteEntity($entity,$useTransaction);

}




